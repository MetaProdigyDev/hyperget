#!/bin/bash

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'
COLORS=("$RED" "$GREEN" "$YELLOW" "$BLUE" "$CYAN" "$MAGENTA")

INSTALL_DIR="/usr/local/bin"
SCRIPT_NAME="hyperget"
INSTALL_PATH="$INSTALL_DIR/$SCRIPT_NAME"

detect_package_manager() {
    if command -v apt-get &> /dev/null; then
        echo "apt"
    elif command -v dnf &> /dev/null; then
        echo "dnf"
    elif command -v pacman &> /dev/null; then
        echo "pacman"
    elif command -v yum &> /dev/null; then
        echo "yum"
    elif command -v zypper &> /dev/null; then
        echo "zypper"
    elif command -v brew &> /dev/null; then
        echo "brew"
    elif command -v pkg &> /dev/null; then
        echo "pkg"
    elif command -v emerge &> /dev/null; then
        echo "emerge"
    elif command -v pkg_add &> /dev/null; then
        echo "pkg_add"
    elif command -v apk &> /dev/null; then
        echo "apk"
    else
        return 1
    fi
}

install_figlet() {
    local manager="$1"
    echo -e "${YELLOW}Installing 'figlet' using $manager...${NC}"
    case "$manager" in
        apt) sudo apt-get update && sudo apt-get install -y figlet ;;
        dnf) sudo dnf install -y figlet ;;
        pacman) sudo pacman -Sy --noconfirm figlet ;;
        yum) sudo yum install -y figlet ;;
        zypper) sudo zypper install -y figlet ;;
        brew) brew install figlet ;;
        pkg) sudo pkg install -y figlet ;;
        emerge) sudo emerge app-misc/figlet ;;
        pkg_add) sudo pkg_add figlet ;;
        apk) sudo apk add figlet ;;
        *) echo -e "${RED}Error: Unsupported package manager '$manager'.${NC}"; return 1 ;;
    esac
}

if ! command -v figlet &> /dev/null; then
    echo -e "${YELLOW}'figlet' is not installed.${NC}"
    PACKAGE_MANAGER=$(detect_package_manager)
    if [[ $? -ne 0 ]]; then
        echo -e "${RED}Error: No supported package manager found.${NC}"
        exit 1
    fi
    read -p "Install 'figlet' using $PACKAGE_MANAGER? (y/n): " install_figlet_choice
    if [[ "$install_figlet_choice" =~ ^[Yy]$ ]]; then
        install_figlet "$PACKAGE_MANAGER"
        [[ $? -ne 0 ]] && exit 1
    else
        echo -e "${RED}'figlet' is required. Exiting.${NC}"
        exit 1
    fi
fi

AUTOCOMPLETE_FILE_SOURCE="$(dirname "$SCRIPT_PATH")/${SCRIPT_NAME}_autocomplete"
BASH_COMPLETION_DIR="/etc/bash_completion.d"
ZSH_COMPLETION_DIR="/usr/share/zsh/site-functions"
AUTOCOMPLETE_FILE_BASH="${BASH_COMPLETION_DIR}/${SCRIPT_NAME}_autocomplete"
AUTOCOMPLETE_FILE_ZSH="${ZSH_COMPLETION_DIR}/_${SCRIPT_NAME}"
SCRIPT_PATH="$(readlink -f "$0" 2>/dev/null || realpath "$0" 2>/dev/null || echo "$0")"
INSTALLED_PATH="$(command -v "$SCRIPT_NAME" 2>/dev/null || echo "")"

install_bash_autocomplete() {
    echo -e "${YELLOW}Installing Bash autocomplete...${NC}"
    if [[ -f "$AUTOCOMPLETE_FILE_SOURCE" ]]; then
        sudo cp "$AUTOCOMPLETE_FILE_SOURCE" "$AUTOCOMPLETE_FILE_BASH"
        sudo chmod +x "$AUTOCOMPLETE_FILE_BASH"
        echo -e "${GREEN}Bash autocomplete installed.${NC}"
    else
        echo -e "${RED}Error: Autocomplete file not found.${NC}"
        exit 1
    fi
}

install_zsh_autocomplete() {
    echo -e "${YELLOW}Installing Zsh autocomplete...${NC}"
    if [[ -f "$AUTOCOMPLETE_FILE_SOURCE" ]]; then
        sudo cp "$AUTOCOMPLETE_FILE_SOURCE" "$AUTOCOMPLETE_FILE_ZSH"
        sudo chmod +x "$AUTOCOMPLETE_FILE_ZSH"
        echo -e "${GREEN}Zsh autocomplete installed.${NC}"
    else
        echo -e "${RED}Error: Autocomplete file not found.${NC}"
        exit 1
    fi
}

detect_shell() {
    if [[ "$SHELL" == */bash ]]; then
        echo "bash"
    elif [[ "$SHELL" == */zsh ]]; then
        echo "zsh"
    else
        echo "unknown"
    fi
}

install_autocomplete() {
    current_shell=$(detect_shell)
    case "$current_shell" in
        bash) install_bash_autocomplete ;;
        zsh) install_zsh_autocomplete ;;
        *) echo -e "${RED}Unsupported shell.${NC}"; exit 1 ;;
    esac
}

if [[ "$1" == "-r" ]]; then
    if [[ -n "$INSTALLED_PATH" && "$SCRIPT_PATH" != "$INSTALLED_PATH" ]]; then
        echo -e "${YELLOW}Script already installed.${NC}"
        read -p "Reinstall? (y/n): " reinstall_choice
        if [[ "$reinstall_choice" =~ ^[Yy]$ ]]; then
            if sudo -v &> /dev/null; then
                echo -e "${GREEN}Reinstalling...${NC}"
                sudo cp "$SCRIPT_PATH" "$INSTALL_PATH"
                sudo chmod +x "$INSTALL_PATH"
                install_bash_autocomplete
                install_zsh_autocomplete
            else
                echo -e "${RED}Need sudo permissions.${NC}"
                exit 1
            fi
        else
            echo -e "${GREEN}Skipping reinstallation.${NC}"
        fi
        exit 0
    else
        echo -e "${RED}Script not installed.${NC}"
        exit 1
    fi
fi

if [[ -z "$INSTALLED_PATH" ]]; then
    read -p "Install to '$INSTALL_DIR'? (y/n): " install_choice
    if [[ "$install_choice" =~ ^[Yy]$ ]]; then
        if sudo -v &> /dev/null; then
            echo -e "${GREEN}Installing...${NC}"
            [[ ! -d "$INSTALL_DIR" ]] && echo -e "${RED}Directory doesn't exist.${NC}" && exit 1
            if sudo cp "$SCRIPT_PATH" "$INSTALL_PATH"; then
                sudo chmod +x "$INSTALL_PATH"
                echo -e "${GREEN}Installed successfully.${NC}"
                install_bash_autocomplete
                install_zsh_autocomplete
            else
                echo -e "${RED}Failed to install.${NC}"
                exit 1
            fi
        else
            echo -e "${RED}Need sudo permissions.${NC}"
            exit 1
        fi
    else
        echo -e "${YELLOW}Installation skipped.${NC}"
    fi
else
    echo -e "${GREEN}Already installed.${NC}"
    [[ ! -f "$AUTOCOMPLETE_FILE_BASH" ]] && install_bash_autocomplete
    [[ ! -f "$AUTOCOMPLETE_FILE_ZSH" ]] && install_zsh_autocomplete
fi

figlet_output=$(figlet -f slant "Hyperget")
footer="by MetaProdigyDev"

IFS=$'\n' read -rd '' -a lines <<<"$figlet_output"
for i in "${!lines[@]}"; do
    color=${COLORS[$((i % ${#COLORS[@]}))]}
    echo -e "${color}${lines[$i]}${NC}"
done

last_line_length=${#lines[-1]}
padding=$(( last_line_length - ${#footer} ))
(( padding > 0 )) && printf "%${padding}s%s\n" "" "$footer" || echo "$footer"

flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo &>/dev/null

_spinner() {
    local on_success="DONE"
    local on_fail="FAIL"
    local nc="\e[0m"
    case $1 in
        start)
            let column=$(tput cols)-${#2}-8
            echo -ne ${2}
            printf "%${column}s"
            i=1
            sp='\|/-'
            delay=${SPINNER_DELAY:-0.15}
            while :; do printf "\b${sp:i++%${#sp}:1}"; sleep $delay; done
            ;;
        stop)
            [[ -z $3 ]] && echo "spinner is not running" && exit 1
            kill $3 > /dev/null 2>&1
            echo -en "\b["
            [[ $2 -eq 0 ]] && echo -en "${GREEN}${on_success}${nc}" || echo -en "${RED}${on_fail}${nc}"
            echo -e "]"
            ;;
        *) echo "Invalid argument"; exit 1 ;;
    esac
}

start_spinner() { _spinner "start" "$1" & _sp_pid=$!; disown; }
stop_spinner() { _spinner "stop" $1 $_sp_pid; unset _sp_pid; }

if [[ $# -eq 0 ]]; then
    echo -e "${YELLOW}Usage:${NC} $SCRIPT_NAME search <package_name>"
    echo -e "${YELLOW}       ${NC} $SCRIPT_NAME remove <package_name>"
    echo -e "${YELLOW}       ${NC} $SCRIPT_NAME -i <package_name>"
    exit 0
fi

fancy_spinner() {
    local pid=$1
    start_spinner "Searching Database..."
    wait $pid
    stop_spinner $?
}

search_package_exact() {
    local package_name="$1"
    local manager="$2"
    case $manager in
        apt) apt-cache search --names-only "^$package_name\$" 2>/dev/null | head -n 1 ;;
        dnf) dnf list available "$package_name" 2>/dev/null | grep -E "^$package_name\." | head -n 1 ;;
        pacman) pacman -Ss "^$package_name\$" | head -n 1 ;;
        flatpak) flatpak search "$package_name" | grep -v "Application ID" | head -n 5 ;;
        snap) snap find "$package_name" | awk 'NR>1 {printf "%s - %s\n", $1, substr($0, index($0,$2))}' | head -n 1 ;;
        brew) search_results=$(brew search "$package_name"); [[ -z "$search_results" ]] && return 0 || brew info --json=v1 $search_results | jq -r '.[] | .name + " - " + (.desc // "No description available")' | head -n 5 ;;
        *) return 1 ;;
    esac
}

is_installed() {
    if command -v "$1" &> /dev/null; then
        return 0
    else
        return 1
    fi
}

search_package_partial() {
    local package_name="$1"
    local manager="$2"
    case $manager in
        apt) apt-cache search "$package_name" 2>/dev/null | head -n 5 ;;
        dnf) dnf search "$package_name" 2>/dev/null | head -n 5 ;;
        pacman) pacman -Ss "$package_name" | head -n 5 ;;
        flatpak) flatpak search "$package_name" | grep -v "Application ID" | head -n 5 ;;
        snap) snap find "$package_name" | awk 'NR>1 {print $1}' | head -n 5 ;;
        brew) search_results=$(brew search "$package_name"); [[ -z "$search_results" ]] && return 0 || brew info --json=v1 $search_results | jq -r '.[] | .name + " - " + (.desc // "No description available")' | head -n 5 ;;
        *) return 1 ;;
    esac
}

search_packages() {
    local package_name="$1"
    declare -A found_packages
    local global_index=1
    echo -e "${GREEN}Searching for package: ${NC}$package_name"
    sleep 1 & fancy_spinner
    for manager in apt dnf pacman flatpak snap brew; do
        if is_installed "$manager"; then
            exact_match=$(search_package_exact "$package_name" "$manager")
            [[ -n "$exact_match" ]] && found_packages[$manager]="$exact_match" || {
                partial_matches=$(search_package_partial "$package_name" "$manager")
                [[ -n "$partial_matches" ]] && found_packages[$manager]="$partial_matches"
            }
        fi
    done
    [[ ${#found_packages[@]} -eq 0 ]] && echo -e "${RED}No packages found matching '$package_name'.${NC}" && exit 1 || display_results_and_select_package found_packages
}

display_results_and_select_package() {
    declare -n packages=$1
    declare -A results package_managers
    echo -e "${GREEN}Packages found:${NC}"
    colors=("$CYAN" "$MAGENTA" "$YELLOW" "$BLUE")
    color_index=0
    local global_index=1
    for manager in "${!packages[@]}"; do
        echo -e "${GREEN}${manager}:${NC}"
        IFS=$'\n' read -r -a package_list <<< "${packages[$manager]}"
        for line in "${package_list[@]}"; do
            color=${colors[$color_index]}
            echo -e "${color}  $global_index) $line${NC}"
            results[$global_index]="$line"
            package_managers[$global_index]="$manager"
            global_index=$((global_index + 1))
            color_index=$(( (color_index + 1) % ${#colors[@]} ))
        done
    done
    while true; do
        read -p "Select the package to install (1-$((global_index - 1))): " choice
        if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le $((global_index - 1)) ]; then
            selected_package="${results[$choice]}"
            selected_manager="${package_managers[$choice]}"
            break
        else
            echo -e "${RED}Invalid choice.${NC}"
        fi
    done
    selected_package_name=$(extract_package_name "$selected_package" "$selected_manager")
    if is_package_installed "$selected_package_name" "$selected_manager"; then
        echo -e "${YELLOW}Package already installed.${NC}"
        read -p "Remove it? (y/n): " remove_choice
        [[ "$remove_choice" == "y" ]] && remove_package "$selected_package_name" "$selected_manager" || echo -e "${GREEN}Keeping package installed.${NC}"
    else
        install_package "$selected_package_name" "$selected_manager"
    fi
}

extract_package_name() {
    local package_line="$1"
    local manager="$2"
    case $manager in
        apt) echo "$package_line" | awk '{print $1}' ;;
        dnf) echo "$package_line" | awk '{print $1}' ;;
        pacman) echo "$package_line" | awk '{print $1}' ;;
        flatpak) echo "$package_line" | awk '{print $3}' | grep '\.' ;;
        snap) echo "$package_line" | awk '{print $1}' ;;
        brew) echo "$package_line" | awk '{print $1}' ;;
        *) return 1 ;;
    esac
}

is_package_installed() {
    local package_name="$1"
    local manager="$2"
    case $manager in
        apt) dpkg -l | grep -qw "$package_name" ;;
        dnf) dnf list installed "$package_name" &>/dev/null ;;
        pacman) pacman -Qs "$package_name" &>/dev/null ;;
        flatpak) flatpak list --app | awk '{print $1}' | grep -qw "$package_name" ;;
        snap) snap list | awk '{print $1}' | grep -qw "$package_name" ;;
        brew) brew list --formula | grep -qw "$package_name" ;;
        *) return 1 ;;
    esac
}

install_package() {
    package_name="$1"
    package_manager="$2"
    echo -e "${GREEN}Installing $package_name from $package_manager...${NC}"
    case $package_manager in
        apt) sudo apt update -y && sudo apt install -y "$package_name" ;;
        dnf) sudo dnf install -y "$package_name" ;;
        pacman) sudo pacman -S --noconfirm "$package_name" ;;
        flatpak) flatpak install -y flathub "$package_name" ;;
        snap) sudo snap install "$package_name" ;;
        brew) brew install "$package_name" ;;
        *) echo -e "${RED}Unknown package manager.${NC}"; exit 1 ;;
    esac
    [[ $? -eq 0 ]] && echo -e "${GREEN}Success!${NC}" || echo -e "${RED}Failed.${NC}"
}

remove_package() {
    package_name="$1"
    package_manager="$2"
    echo -e "${GREEN}Removing $package_name from $package_manager...${NC}"
    case $package_manager in
        apt) sudo apt remove -y "$package_name" ;;
        dnf) sudo dnf remove -y "$package_name" ;;
        pacman) sudo pacman -Rns "$package_name" ;;
        flatpak) flatpak uninstall -y "$package_name" ;;
        snap) sudo snap remove "$package_name" ;;
        brew) brew uninstall "$package_name" ;;
        *) echo -e "${RED}Unknown package manager.${NC}"; exit 1 ;;
    esac
    [[ $? -eq 0 ]] && echo -e "${GREEN}Success!${NC}" || echo -e "${RED}Failed.${NC}"
}

if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    echo -e "${YELLOW}Usage:${NC} $SCRIPT_NAME search <package_name>"
    echo -e "${YELLOW}       ${NC} $SCRIPT_NAME remove <package_name>"
    echo -e "${YELLOW}       ${NC} $SCRIPT_NAME -i <package_name>"
    exit 0
elif [[ "$1" == "search" && -n "$2" ]]; then
    search_packages "$2"
elif [[ "$1" == "remove" && -n "$2" ]]; then
    package_manager=$(detect_package_manager)
    [[ "$package_manager" == "unknown" ]] && echo -e "${RED}Error: No compatible package manager.${NC}" && exit 1
    remove_package "$2" "$package_manager"
elif [[ "$1" == "-i" && -n "$2" ]]; then
    package_manager=$(detect_package_manager)
    [[ "$package_manager" == "unknown" ]] && echo -e "${RED}Error: No compatible package manager.${NC}" && exit 1
fi
